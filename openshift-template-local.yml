kind: Template
apiVersion: v1
metadata:
  name: "jenkins"
labels:
  createdBy: "jenkins-template"
parameters:
  - name: "APPLICATION_NAME"
    displayName: "Application name"
    description: "The name of the application. The service will be named like the application."
    value: "jenkins"

  - name: "APPLICATION_HOSTNAME"
    displayName: "Jenkins instance hostname"
    description: "Hostname for service routes."
    required: true

  - name: "JENKINS_DOCKER_TAG"
    displayName: "Jenkins docker tag"
    description: "The tag of the Jenkins Docker image"
    value: "2.32.3"

  - name: "JENKINS_DOCKER_IMAGE"
    displayName: "Jenkins docker image"
    description: "The name of the Jenkins Docker image (without the tag)."
    value: "jenkins"

objects:
  - kind: ServiceAccount
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}-user"
      labels:
        app: "${APPLICATION_NAME}"

  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ConfigChange
      replicas: 1
      test: false
      selector:
        app: "${APPLICATION_NAME}"
        deploymentconfig: "${APPLICATION_NAME}"
      template:
        metadata:
          labels:
            app: "${APPLICATION_NAME}"
            deploymentconfig: "${APPLICATION_NAME}"
        spec:
          serviceAccountName: "${APPLICATION_NAME}-user"
          containers:
            - name: "${APPLICATION_NAME}"
              image: "${APPLICATION_NAME}"
              ports:
                - containerPort: 8080
                  protocol: TCP
                - containerPort: 50000
                  protocol: TCP
              imagePullPolicy: Always
              livenessProbe:
                failureThreshold: 30
                httpGet:
                  path: /login
                  port: 8080
                initialDelaySeconds: 420
                timeoutSeconds: 3
              readinessProbe:
                httpGet:
                  path: /login
                  port: 8080
                initialDelaySeconds: 3
                timeoutSeconds: 3

  - kind: Service
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      ports:
        - name: "80-http"
          protocol: TCP
          port: 8081
          targetPort: 8080
      selector:
        app: "${APPLICATION_NAME}"
        deploymentconfig: "${APPLICATION_NAME}"
      type: ClusterIP
      sessionAffinity: None

  - kind: Route
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      host: "${APPLICATION_HOSTNAME}"
      to:
        kind: Service
        name: "${APPLICATION_NAME}"
      port:
        targetPort: "80-http"
