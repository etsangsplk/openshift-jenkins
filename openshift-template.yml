kind: Template
apiVersion: v1
metadata:
  name: "jenkins"
labels:
  createdBy: "jenkins-template"
parameters:
  - name: "APPLICATION_NAME"
    displayName: "Application name"
    description: "The name of the application. The service will be named like the application."
    value: "jenkins"

  - name: "APPLICATION_HOSTNAME"
    displayName: "Jenkins instance hostname"
    description: "Hostname for service routes."
    required: true

  - name: "JENKINS_DOCKER_TAG"
    displayName: "Jenkins docker tag"
    description: "The tag of the Jenkins Docker image"
    value: "2.32.3"

  - name: "JENKINS_DOCKER_IMAGE"
    displayName: "Jenkins docker image"
    description: "The name of the Jenkins Docker image (without the tag)."
    value: "jenkins"

  - name: "JENKINS_VOL_ID"
    displayName: "EBS volume ID"
    description: "The ID of the EBS volume storing Jenkins data."
    required: true

  - name: "JENKINS_VOL_SIZE"
    displayName: "EBS volume size"
    description: "The size of the EBS volume storing Jenkins data."
objects:
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      tags:
        - name: "jenkins-${JENKINS_DOCKER_TAG}"
          from:
            kind: DockerImage
            name: "${JENKINS_DOCKER_IMAGE}:${JENKINS_DOCKER_TAG}"

  - kind: ServiceAccount
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}-user"
      labels:
        app: "${APPLICATION_NAME}"

  - kind: PersistentVolume
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}-pv"
      annotations:
        pv.beta.kubernetes.io/gid: "1234"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      capacity:
        storage: ${JENKINS_VOL_SIZE}
      accessModes:
        - ReadWriteOnce
      awsElasticBlockStore:
        fsType: ext4
        volumeID: "${JENKINS_VOL_ID}"

  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}-data"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: "${JENKINS_VOL_SIZE}"
      selector:
        matchLabels:
          app: "${APPLICATION_NAME}"

  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - "${APPLICATION_NAME}"
            from:
              kind: ImageStreamTag
              name: "${APPLICATION_NAME}:jenkins-${JENKINS_DOCKER_TAG}"
      replicas: 1
      test: false
      selector:
        app: "${APPLICATION_NAME}"
        deploymentconfig: "${APPLICATION_NAME}"
      template:
        metadata:
          labels:
            app: "${APPLICATION_NAME}"
            deploymentconfig: "${APPLICATION_NAME}"
        spec:
          serviceAccountName: "${APPLICATION_NAME}-user"
          volumes:
            - name: "jenkins-volume"
              persistentVolumeClaim:
                claimName: "${APPLICATION_NAME}-data"
          securityContext:
            fsGroup: 1234
          containers:
            - name: "${APPLICATION_NAME}"
              image: "${APPLICATION_NAME}"
              ports:
                - containerPort: 8080
                  protocol: TCP
                - containerPort: 50000
                  protocol: TCP
              volumeMounts:
                - mountPath: /var/jenkins_home
                  name: jenkins-volume
                  readOnly: false
              imagePullPolicy: Always
              livenessProbe:
                failureThreshold: 30
                httpGet:
                  path: /login
                  port: 8080
                initialDelaySeconds: 420
                timeoutSeconds: 3
              readinessProbe:
                httpGet:
                  path: /login
                  port: 8080
                initialDelaySeconds: 3
                timeoutSeconds: 3

  - kind: Service
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      ports:
        - name: "80-http"
          protocol: TCP
          port: 80
          targetPort: 8080
      selector:
        app: "${APPLICATION_NAME}"
        deploymentconfig: "${APPLICATION_NAME}"
      type: ClusterIP
      sessionAffinity: None

  - kind: Route
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      host: "${APPLICATION_HOSTNAME}"
      to:
        kind: Service
        name: "${APPLICATION_NAME}"
      port:
        targetPort: "80-http"
